     1                                  section .data
     2                                      ; No data section needed for this module
     3                                  
     4                                  section .bss
     5                                      ; No uninitialized data needed for this module
     6                                  
     7                                  section .text
     8                                      global istriangle
     9                                  
    10                                  istriangle:
    11                                      ;=========== Back up all the GPRs whether used in this program or not =========================================================
    12 00000000 55                          push       rbp                                              ; Save a copy of the stack base pointer
    13 00000001 4889E5                      mov        rbp, rsp                                         ; We do this in order to be 100% compatible with C and C++.
    14 00000004 53                          push       rbx                                              ; Back up rbx
    15 00000005 51                          push       rcx                                              ; Back up rcx
    16 00000006 52                          push       rdx                                              ; Back up rdx
    17 00000007 56                          push       rsi                                              ; Back up rsi
    18 00000008 57                          push       rdi                                              ; Back up rdi
    19 00000009 4150                        push       r8                                               ; Back up r8
    20 0000000B 4151                        push       r9                                               ; Back up r9
    21 0000000D 4152                        push       r10                                              ; Back up r10
    22 0000000F 4153                        push       r11                                              ; Back up r11
    23 00000011 4154                        push       r12                                              ; Back up r12
    24 00000013 4155                        push       r13                                              ; Back up r13
    25 00000015 4156                        push       r14                                              ; Back up r14
    26 00000017 4157                        push       r15                                              ; Back up r15
    27 00000019 9C                          pushf                                                       ; Back up rflags
    28                                  
    29                                      ; Load the sides into XMM registers
    30 0000001A F20F10C0                    movsd xmm0, xmm0            ; xmm0 = a
    31 0000001E F20F10C9                    movsd xmm1, xmm1            ; xmm1 = b
    32 00000022 F20F10D2                    movsd xmm2, xmm2            ; xmm2 = c
    33                                  
    34                                      ; Check if a + b > c
    35 00000026 F20F10D8                    movsd xmm3, xmm0            ; xmm3 = a
    36 0000002A F20F58D9                    addsd xmm3, xmm1            ; xmm3 = a + b
    37 0000002E 660F2FDA                    comisd xmm3, xmm2           ; Compare (a + b) with c
    38 00000032 7623                        jbe .invalid_triangle       ; Jump if (a + b) <= c
    39                                  
    40                                      ; Check if a + c > b
    41 00000034 F20F10D8                    movsd xmm3, xmm0            ; xmm3 = a
    42 00000038 F20F58DA                    addsd xmm3, xmm2            ; xmm3 = a + c
    43 0000003C 660F2FD9                    comisd xmm3, xmm1           ; Compare (a + c) with b
    44 00000040 7615                        jbe .invalid_triangle       ; Jump if (a + c) <= b
    45                                  
    46                                      ; Check if b + c > a
    47 00000042 F20F10D9                    movsd xmm3, xmm1            ; xmm3 = b
    48 00000046 F20F58DA                    addsd xmm3, xmm2            ; xmm3 = b + c
    49 0000004A 660F2FD8                    comisd xmm3, xmm0           ; Compare (b + c) with a
    50 0000004E 7607                        jbe .invalid_triangle       ; Jump if (b + c) <= a
    51                                  
    52                                      ; If all conditions are satisfied, the sides form a valid triangle
    53 00000050 B801000000                  mov rax, 1                  ; Return true (1)
    54 00000055 EB05                        jmp .restore_registers
    55                                  
    56                                  .invalid_triangle:
    57                                      ; If any condition fails, the sides do not form a valid triangle
    58 00000057 B800000000                  mov rax, 0                  ; Return false (0)
    59                                  
    60                                  .restore_registers:
    61                                      ;=========== Restore all the GPRs whether used in this program or not =========================================================
    62 0000005C 9D                          popf                                                        ; Restore rflags
    63 0000005D 415F                        pop        r15                                              ; Restore r15
    64 0000005F 415E                        pop        r14                                              ; Restore r14
    65 00000061 415D                        pop        r13                                              ; Restore r13
    66 00000063 415C                        pop        r12                                              ; Restore r12
    67 00000065 415B                        pop        r11                                              ; Restore r11
    68 00000067 415A                        pop        r10                                              ; Restore r10
    69 00000069 4159                        pop        r9                                               ; Restore r9
    70 0000006B 4158                        pop        r8                                               ; Restore r8
    71 0000006D 5F                          pop        rdi                                              ; Restore rdi
    72 0000006E 5E                          pop        rsi                                              ; Restore rsi
    73 0000006F 5A                          pop        rdx                                              ; Restore rdx
    74 00000070 59                          pop        rcx                                              ; Restore rcx
    75 00000071 5B                          pop        rbx                                              ; Restore rbx
    76 00000072 5D                          pop        rbp                                              ; Restore rbp
    77                                  
    78 00000073 C3                          ret                                                         ; Return to caller
